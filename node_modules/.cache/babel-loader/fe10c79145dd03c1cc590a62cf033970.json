{"ast":null,"code":"import _slicedToArray from \"/Users/smohanra/Desktop/crescentMockup/crescent/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/smohanra/Desktop/crescentMockup/crescent/src/App.js\";\nimport React, { Component, useState } from 'react';\nimport './App.css';\nimport { Icon, Menu, Segment, Button, Label, Grid, Image, Modal, Divider } from 'semantic-ui-react';\nimport tsne from './tsne.png';\nimport logo from \"./logo.svg\";\n\nconst VisualizationComponent = ({}) => {\n  const _useState = useState('Home'),\n        _useState2 = _slicedToArray(_useState, 2),\n        visContent = _useState2[0],\n        setVisContent = _useState2[1];\n\n  return React.createElement(Segment, {\n    attached: \"top\",\n    style: {\n      height: '90%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    style: {\n      height: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    width: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(Image, {\n    size: \"small\",\n    src: tsne,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }), visContent == 'Home' ? 'Home plot here' : visContent == 'Alignment' ? 'Alignment plot here' : visContent == 'Normalization' ? 'Normalization plot here' : visContent == 'Clustering' ? 'Clustering plot here' : 'No plots', React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }), React.createElement(Button.Group, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, ['Home', 'Alignment', 'Normalization', 'Clustering'].map(step => React.createElement(Button, {\n    onClick: () => setVisContent(step),\n    content: step,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  })))), React.createElement(Grid.Column, {\n    width: 4,\n    style: {\n      height: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(Segment, {\n    style: {\n      height: '50%'\n    },\n    content: \"\".concat(visContent, \" legend\"),\n    placeholder: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), React.createElement(Segment, {\n    style: {\n      height: '50%'\n    },\n    content: \"\".concat(visContent, \" logs\"),\n    placeholder: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }))));\n};\n\nconst MenuComponent = ({}) => {\n  return React.createElement(Segment, {\n    attached: \"bottom\",\n    style: {\n      height: '10%'\n    },\n    as: Menu,\n    size: \"big\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(Menu.Item, {\n    header: true,\n    icon: \"database\",\n    iconPosition: \"left\",\n    content: \"CReSCENT\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }), React.createElement(Modal, {\n    trigger: React.createElement(Menu.Item, {\n      content: React.createElement(Button, {\n        color: \"red\",\n        content: \"Upload\",\n        icon: \"upload\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }),\n    header: \"Upload Workflow Inputs Here\",\n    content: \"Upload API stuff here\",\n    actions: [React.createElement(Button, {\n      key: \"submit\",\n      content: \"Submit uploads\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), React.createElement(Menu.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), React.createElement(Menu.Menu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, ['Alignment', 'Normalization', 'Clustering'].map(step => React.createElement(Modal, {\n    trigger: React.createElement(Menu.Item, {\n      key: step,\n      content: React.createElement(Button, {\n        content: step,\n        fluid: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }),\n    header: step,\n    content: \"\".concat(step, \" parameters\"),\n    actions: [React.createElement(Button, {\n      key: \"close\",\n      content: \"close\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    })],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }))));\n};\n\nconst App = ({}) => {\n  return React.createElement(Segment, {\n    style: {\n      height: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(VisualizationComponent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }), React.createElement(MenuComponent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/smohanra/Desktop/crescentMockup/crescent/src/App.js"],"names":["React","Component","useState","Icon","Menu","Segment","Button","Label","Grid","Image","Modal","Divider","tsne","VisualizationComponent","visContent","setVisContent","height","map","step","MenuComponent","App"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAO,WAAP;AAEA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,OAArB,EAA8BC,MAA9B,EAAsCC,KAAtC,EAA6CC,IAA7C,EAAmDC,KAAnD,EAA0DC,KAA1D,EAAiEC,OAAjE,QAAgF,mBAAhF;AAEA,OAAOC,IAAP,MAAiB,YAAjB;;;AAGA,MAAMC,sBAAsB,GAAG,CAAC,EAAD,KAEzB;AAAA,oBACgCX,QAAQ,CAAC,MAAD,CADxC;AAAA;AAAA,QACGY,UADH;AAAA,QACeC,aADf;;AAEJ,SACE,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAC,KAAlB;AAAwB,IAAA,KAAK,EAAE;AAACC,MAAAA,MAAM,EAAE;AAAT,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACA,MAAAA,MAAM,EAAE;AAAT,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD,CAAM,MAAN;AAAa,IAAA,KAAK,EAAE,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,GAAG,EAAEJ,IAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAGIE,UAAU,IAAE,MAAZ,GACA,gBADA,GAEEA,UAAU,IAAE,WAAZ,GACF,qBADE,GAEAA,UAAU,IAAE,eAAZ,GACF,yBADE,GAEAA,UAAU,IAAE,YAAZ,GACF,sBADE,GAEA,UAXN,EAaE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,EAcE,oBAAC,MAAD,CAAQ,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,CAAC,MAAD,EAAS,WAAT,EAAsB,eAAtB,EAAuC,YAAvC,EAAqDG,GAArD,CACEC,IAAI,IACF,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE,MAAMH,aAAa,CAACG,IAAD,CAApC;AAA4C,IAAA,OAAO,EAAEA,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAFF,CAdF,CADF,EAyBE,oBAAC,IAAD,CAAM,MAAN;AAAa,IAAA,KAAK,EAAE,CAApB;AAAuB,IAAA,KAAK,EAAE;AAACF,MAAAA,MAAM,EAAE;AAAT,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAE;AAACA,MAAAA,MAAM,EAAE;AAAT,KAAhB;AACE,IAAA,OAAO,YAAKF,UAAL,YADT;AACmC,IAAA,WAAW,MAD9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAIE,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAE;AAACE,MAAAA,MAAM,EAAE;AAAT,KAAhB;AACE,IAAA,OAAO,YAAKF,UAAL,UADT;AACiC,IAAA,WAAW,MAD5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CAzBF,CADF,CADF;AAsCD,CA1CD;;AA4CA,MAAMK,aAAa,GAAG,CAAC,EAAD,KAEhB;AACJ,SACM,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAC,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAACH,MAAAA,MAAM,EAAE;AAAT,KAAlC;AAAmD,IAAA,EAAE,EAAEZ,IAAvD;AAA6D,IAAA,IAAI,EAAC,KAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD,CAAM,IAAN;AACE,IAAA,MAAM,MADR;AAEE,IAAA,IAAI,EAAC,UAFP;AAGE,IAAA,YAAY,EAAC,MAHf;AAIE,IAAA,OAAO,EAAC,UAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOE,oBAAC,KAAD;AACE,IAAA,OAAO,EACL,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,OAAO,EAChB,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,KAAd;AAAoB,QAAA,OAAO,EAAC,QAA5B;AAAqC,QAAA,IAAI,EAAC,QAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ;AAME,IAAA,MAAM,EAAC,6BANT;AAOE,IAAA,OAAO,EAAC,uBAPV;AAQE,IAAA,OAAO,EACL,CACE,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAC,QAAZ;AAAqB,MAAA,OAAO,EAAC,gBAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,EAqBE,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBF,EAsBE,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,CAAC,WAAD,EAAc,eAAd,EAA+B,YAA/B,EAA6Ca,GAA7C,CACEC,IAAI,IAGE,oBAAC,KAAD;AACE,IAAA,OAAO,EACL,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,GAAG,EAAEA,IAAhB;AAAsB,MAAA,OAAO,EAC3B,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAEA,IAAjB;AAAuB,QAAA,KAAK,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ;AAME,IAAA,MAAM,EAAEA,IANV;AAOE,IAAA,OAAO,YAAKA,IAAL,gBAPT;AAQE,IAAA,OAAO,EAAE,CACP,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAC,OAAZ;AAAoB,MAAA,OAAO,EAAC,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADO,CARX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJR,CAFF,CAtBF,CADN;AAgDD,CAnDD;;AAqDA,MAAME,GAAG,GAAG,CAAC,EAAD,KAEN;AACF,SACE,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAE;AAACJ,MAAAA,MAAM,EAAE;AAAT,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,sBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CATH;;AAWE,eAAeI,GAAf","sourcesContent":["import React, {Component, useState} from 'react';\nimport './App.css';\n\nimport { Icon, Menu, Segment, Button, Label, Grid, Image, Modal, Divider } from 'semantic-ui-react'\n\nimport tsne from './tsne.png'\nimport logo from './logo.svg'\n\nconst VisualizationComponent = ({\n\n}) => {\n  const [visContent, setVisContent] = useState('Home')\n  return (\n    <Segment attached='top' style={{height: '90%'}}>\n      <Grid style={{height: '100%'}}>\n        <Grid.Column width={12}>\n          <Image size='small' src={tsne} />\n          {\n            visContent=='Home' ?\n            'Home plot here'\n            : visContent=='Alignment' ?\n            'Alignment plot here'\n            : visContent=='Normalization' ?\n            'Normalization plot here'\n            : visContent=='Clustering' ?\n            'Clustering plot here'\n            : 'No plots'\n          }\n          <Divider />\n          <Button.Group>\n          {\n            ['Home', 'Alignment', 'Normalization', 'Clustering'].map(\n              step => (\n                <Button onClick={() => setVisContent(step)} content={step} />\n              )\n            )\n          }\n          </Button.Group>\n        </Grid.Column>\n        <Grid.Column width={4} style={{height: '100%'}}>\n          <Segment style={{height: '50%'}}\n            content={`${visContent} legend`} placeholder\n          />\n          <Segment style={{height: '50%'}} \n            content={`${visContent} logs`} placeholder\n          />\n        </Grid.Column>\n      </Grid>\n    </Segment>\n  )\n}\n\nconst MenuComponent = ({\n\n}) => {\n  return (\n        <Segment attached='bottom' style={{height: '10%'}} as={Menu} size='big'>\n          <Menu.Item\n            header\n            icon='database'\n            iconPosition='left'\n            content='CReSCENT'\n          />\n          <Modal\n            trigger={\n              <Menu.Item content={\n                <Button color='red' content='Upload' icon='upload'/>\n              } />\n            }\n            header='Upload Workflow Inputs Here'\n            content='Upload API stuff here'\n            actions={\n              [\n                <Button key='submit' content='Submit uploads' />\n              ]\n            }\n          />\n          <Menu.Item />\n          <Menu.Menu>\n          {\n            ['Alignment', 'Normalization', 'Clustering'].map(\n              step => (\n\n                  \n                    <Modal\n                      trigger={\n                        <Menu.Item key={step} content={\n                          <Button content={step} fluid />\n                        } />\n                      }\n                      header={step}\n                      content={`${step} parameters`}\n                      actions={[\n                        <Button key='close' content='close' />\n                      ]}\n                    />\n\n              )\n            )\n          }\n          </Menu.Menu>\n        </Segment>\n  )\n}\n\nconst App = ({\n\n}) => {\n    return (\n      <Segment style={{height: '100%'}}>\n        <VisualizationComponent />\n        <MenuComponent />\n      </Segment>\n    )\n  }\n\n  export default App\n"]},"metadata":{},"sourceType":"module"}